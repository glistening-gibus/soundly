'use strict';

var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var assert = chai.assert;
chai.use(chaiAsPromised);
var should = chai.should();
var expect = chai.expect;
var queue = require('../server/routes/queue.js');
var User = require('../server/models/User.js');

var song0 = {
  id: '100',
  title: 'no sleep till brooklyn',
  duration: '50',
  stream_url: 'soundcloud/101',
  artwork_url: 'http://beastie.com'
};
var song1 = {
  id: '101',
  title: 'like a prayer',
  duration: '70',
  stream_url: 'soundcloud/102',
  artwork_url: 'madonna.com'
};
var song2 = {
  id: '102',
  title: 'hot in herre',
  duration: '30',
  stream_url: 'soundcloud/103',
  artwork_url: 'http://hotinherre.com'
};

describe('add and remove songs from the queue', function () {
  var roomid = '00001';

  before(function (done) {
    //  create a user with the roomid;
    new User({ username: 'testqueueuser', password: 'pw', roomid: roomid }).save(function (err, success) {
      return done(err);
    });
  });

  after(function (done) {
    User.remove({ roomid: roomid }).then(function () {
      return done();
    });
  });

  beforeEach(function (done) {
    // Empty the queue
    queue.emptyQueue(roomid).then(function () {
      return done();
    });
  });

  it('get the users queue', function (done) {
    queue.getQueue(roomid).should.be.fulfilled.then(function (queue) {
      expect(queue).to.be.a('array');
    }).should.notify(done);
  });

  it('catch promised error when trying to remove song from empty queue', function (done) {
    queue.removeFirstSong('100', roomid).should.be.rejected.and.notify(done);
  });

  it('add 3 songs to the queue', function (done) {
    queue.addSong(song0, roomid).then(function () {
      return queue.addSong(song1, roomid);
    }).then(function () {
      return queue.addSong(song2, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      expect(updated[0].id).to.equal(song0.id);
      done();
    }).catch(done);
  });

  it('remove song from queue', function (done) {
    queue.addSong(song0, roomid).then(function () {
      return queue.removeFirstSong('100', roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      expect(updated).to.be.empty;
      done();
    }).catch(done);
  });
});

// handle users rooms

// handle upvote and downvote
describe('song rankings are stored', function () {
  var roomid = '00001';

  before(function (done) {
    //  create a user with the roomid;
    new User({ username: 'testqueueuser', password: 'pw', roomid: roomid }).save(function (err, success) {
      return done(err);
    });
  });

  after(function (done) {
    User.remove({ roomid: roomid }).then(function () {
      return done();
    });
  });

  beforeEach(function (done) {
    // runs before all tests in this block
    queue.emptyQueue(roomid).then(function () {
      return queue.addSong(song0, roomid);
    }).then(function () {
      return queue.addSong(song1, roomid);
    }).then(function () {
      return queue.addSong(song2, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated.length, 3);
      done();
    }).catch(done);
  });

  it('record upvotes', function (done) {
    queue.upvote(2, roomid).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[2].upvotes, 1);
      assert.strictEqual(updated[2].downvotes, 0);
    }).then(function () {
      return done();
    }).catch(done);
  });
  it('record downvotes', function (done) {
    queue.downvote(2, roomid).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[2].downvotes, 1);
      assert.strictEqual(updated[2].upvotes, 0);
    }).then(function () {
      return done();
    }).catch(done);
  });
  it('track rankingChange after upvote and downvote', function (done) {
    queue.upvote(2, roomid).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[2].rankingChange, 1);
    }).then(function () {
      return queue.downvote(2, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[2].rankingChange, 0);
      assert.strictEqual(updated[2].downvotes, 1);
      assert.strictEqual(updated[2].upvotes, 1);
    }).then(function () {
      return done();
    }).catch(done);
  });
});

describe('song rankings change order in queue', function () {
  var roomid = '00001';

  before(function (done) {
    //  create a user with the roomid;
    new User({ username: 'testqueueuser', password: 'pw', roomid: roomid, queue: [] }).save(function (err, success) {
      return done(err);
    });
  });

  after(function (done) {
    User.remove({ roomid: roomid }).then(function () {
      return done();
    });
  });

  beforeEach(function (done) {
    // runs before all tests in this block
    queue.emptyQueue(roomid).then(function () {
      return queue.addSong(song0, roomid);
    }).then(function () {
      return queue.addSong(song1, roomid);
    }).then(function () {
      return queue.addSong(song2, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated.length, 3);
      done();
    }).catch(done);
  });

  it('should move the last song to the second after 2 thumbs up', function (done) {
    queue.upvote(2, roomid).then(function () {
      return queue.upvote(2, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[1].id, song2.id);
      done();
    }).catch(done);
  });

  it('should move the second song to the third after 2 thumbs down', function (done) {
    queue.downvote(1, roomid).then(function () {
      return queue.downvote(1, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[2].id, song1.id);
      done();
    }).catch(done);
  });

  it('downvoting does not change playing song', function (done) {
    queue.downvote(0, roomid).then(function () {
      return queue.downvote(0, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[0].id, song0.id);
      done();
    }).catch(done);
  });

  it('upvoting second song doesn\'t preempt the playing song', function (done) {
    queue.upvote(1, roomid).then(function () {
      return queue.upvote(1, roomid);
    }).then(function () {
      return queue.getQueue(roomid);
    }).then(function (updated) {
      assert.strictEqual(updated[0].id, song0.id);
      done();
    }).catch(done);
  });
});
//# sourceMappingURL=data:application/json;base64,